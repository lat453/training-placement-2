class Solution:
    def findSubstring(self, s, words):
        if not s or not words:
            return []

        word_len = len(words[0])
        word_count = len(words)
        total_len = word_len * word_count
        word_map = {}
        for word in words:
            word_map[word] = word_map.get(word, 0) + 1

        result = []
        for i in range(len(s) - total_len + 1):
            seen = {}
            for j in range(0, total_len, word_len):
                part = s[i + j:i + j + word_len]
                if part in word_map:
                    seen[part] = seen.get(part, 0) + 1
                    if seen[part] > word_map[part]:
                        break
                else:
                    break
            else:
                result.append(i)

        return result
